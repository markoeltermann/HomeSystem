// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace SolarmanV5Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ScheduleItemDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The batteryChargeLevel property</summary>
        public int? BatteryChargeLevel { get; set; }
        /// <summary>The isGridChargeEnabled property</summary>
        public bool? IsGridChargeEnabled { get; set; }
        /// <summary>The isGridSellEnabled property</summary>
        public bool? IsGridSellEnabled { get; set; }
        /// <summary>The maxBatteryPower property</summary>
        public int? MaxBatteryPower { get; set; }
        /// <summary>The time property</summary>
        public Time? Time { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SolarmanV5Client.Models.ScheduleItemDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SolarmanV5Client.Models.ScheduleItemDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SolarmanV5Client.Models.ScheduleItemDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "batteryChargeLevel", n => { BatteryChargeLevel = n.GetIntValue(); } },
                { "isGridChargeEnabled", n => { IsGridChargeEnabled = n.GetBoolValue(); } },
                { "isGridSellEnabled", n => { IsGridSellEnabled = n.GetBoolValue(); } },
                { "maxBatteryPower", n => { MaxBatteryPower = n.GetIntValue(); } },
                { "time", n => { Time = n.GetTimeValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("batteryChargeLevel", BatteryChargeLevel);
            writer.WriteBoolValue("isGridChargeEnabled", IsGridChargeEnabled);
            writer.WriteBoolValue("isGridSellEnabled", IsGridSellEnabled);
            writer.WriteIntValue("maxBatteryPower", MaxBatteryPower);
            writer.WriteTimeValue("time", Time);
        }
    }
}
#pragma warning restore CS0618
