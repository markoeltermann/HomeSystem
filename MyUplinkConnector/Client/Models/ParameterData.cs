// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyUplinkConnector.Client.Models
{
    /// <summary>
    /// Grouped parameter value.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class ParameterData : IParsable
    {
        /// <summary>Category.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; private set; }
#nullable restore
#else
        public string Category { get; private set; }
#endif
        /// <summary>Parameter enum values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::MyUplinkConnector.Client.Models.EnumValues>? EnumValues { get; private set; }
#nullable restore
#else
        public List<global::MyUplinkConnector.Client.Models.EnumValues> EnumValues { get; private set; }
#endif
        /// <summary>Parameter max value.</summary>
        public double? MaxValue { get; private set; }
        /// <summary>Parameter min value.</summary>
        public double? MinValue { get; private set; }
        /// <summary>Parameter id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParameterId { get; private set; }
#nullable restore
#else
        public string ParameterId { get; private set; }
#endif
        /// <summary>Parameter name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParameterName { get; private set; }
#nullable restore
#else
        public string ParameterName { get; private set; }
#endif
        /// <summary>Parameter unit.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParameterUnit { get; private set; }
#nullable restore
#else
        public string ParameterUnit { get; private set; }
#endif
        /// <summary>Parameter scale value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScaleValue { get; private set; }
#nullable restore
#else
        public string ScaleValue { get; private set; }
#endif
        /// <summary>Parameter Smart home categories.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SmartHomeCategories { get; private set; }
#nullable restore
#else
        public List<string> SmartHomeCategories { get; private set; }
#endif
        /// <summary>Parameter step value, specifies the allowed stepping between valid valueswhen the value is numeric.</summary>
        public double? StepValue { get; private set; }
        /// <summary>String value property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StrVal { get; private set; }
#nullable restore
#else
        public string StrVal { get; private set; }
#endif
        /// <summary>Timestamp property.</summary>
        public DateTimeOffset? Timestamp { get; private set; }
        /// <summary>Value property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Value { get; private set; }
#nullable restore
#else
        public UntypedNode Value { get; private set; }
#endif
        /// <summary>Defines if parameter could be changed.</summary>
        public bool? Writable { get; private set; }
        /// <summary>Reference to a ShZone entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ZoneId { get; private set; }
#nullable restore
#else
        public string ZoneId { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.Models.ParameterData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyUplinkConnector.Client.Models.ParameterData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyUplinkConnector.Client.Models.ParameterData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category", n => { Category = n.GetStringValue(); } },
                { "enumValues", n => { EnumValues = n.GetCollectionOfObjectValues<global::MyUplinkConnector.Client.Models.EnumValues>(global::MyUplinkConnector.Client.Models.EnumValues.CreateFromDiscriminatorValue)?.AsList(); } },
                { "maxValue", n => { MaxValue = n.GetDoubleValue(); } },
                { "minValue", n => { MinValue = n.GetDoubleValue(); } },
                { "parameterId", n => { ParameterId = n.GetStringValue(); } },
                { "parameterName", n => { ParameterName = n.GetStringValue(); } },
                { "parameterUnit", n => { ParameterUnit = n.GetStringValue(); } },
                { "scaleValue", n => { ScaleValue = n.GetStringValue(); } },
                { "smartHomeCategories", n => { SmartHomeCategories = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "stepValue", n => { StepValue = n.GetDoubleValue(); } },
                { "strVal", n => { StrVal = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "value", n => { Value = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "writable", n => { Writable = n.GetBoolValue(); } },
                { "zoneId", n => { ZoneId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
