// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyUplinkConnector.Client.Models
{
    /// <summary>
    /// Alarms paged.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class AlarmsPaged : IParsable
    {
        /// <summary>Items per page.</summary>
        public int? ItemsPerPage { get; set; }
        /// <summary>Notifications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::MyUplinkConnector.Client.Models.Alarm>? Notifications { get; set; }
#nullable restore
#else
        public List<global::MyUplinkConnector.Client.Models.Alarm> Notifications { get; set; }
#endif
        /// <summary>Num items.</summary>
        public int? NumItems { get; set; }
        /// <summary>Page.</summary>
        public int? Page { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.Models.AlarmsPaged"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyUplinkConnector.Client.Models.AlarmsPaged CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyUplinkConnector.Client.Models.AlarmsPaged();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "itemsPerPage", n => { ItemsPerPage = n.GetIntValue(); } },
                { "notifications", n => { Notifications = n.GetCollectionOfObjectValues<global::MyUplinkConnector.Client.Models.Alarm>(global::MyUplinkConnector.Client.Models.Alarm.CreateFromDiscriminatorValue)?.AsList(); } },
                { "numItems", n => { NumItems = n.GetIntValue(); } },
                { "page", n => { Page = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("itemsPerPage", ItemsPerPage);
            writer.WriteCollectionOfObjectValues<global::MyUplinkConnector.Client.Models.Alarm>("notifications", Notifications);
            writer.WriteIntValue("numItems", NumItems);
            writer.WriteIntValue("page", Page);
        }
    }
}
