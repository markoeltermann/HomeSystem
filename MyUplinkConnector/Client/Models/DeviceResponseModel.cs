// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyUplinkConnector.Client.Models
{
    /// <summary>
    /// DeviceResponseModel.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class DeviceResponseModel : IParsable
    {
        /// <summary>The availableFeatures property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::MyUplinkConnector.Client.Models.AvailableMethods? AvailableFeatures { get; set; }
#nullable restore
#else
        public global::MyUplinkConnector.Client.Models.AvailableMethods AvailableFeatures { get; set; }
#endif
        /// <summary>Specifies the different connection states of a device.0 - Disconnected1 - Connected</summary>
        public global::MyUplinkConnector.Client.Models.DeviceConnectionState? ConnectionState { get; set; }
        /// <summary>Firmware response model</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::MyUplinkConnector.Client.Models.FirmwareResponseModel? Firmware { get; set; }
#nullable restore
#else
        public global::MyUplinkConnector.Client.Models.FirmwareResponseModel Firmware { get; set; }
#endif
        /// <summary>Id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>ProductResponseModel</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::MyUplinkConnector.Client.Models.ProductResponseModel? Product { get; set; }
#nullable restore
#else
        public global::MyUplinkConnector.Client.Models.ProductResponseModel Product { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.Models.DeviceResponseModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyUplinkConnector.Client.Models.DeviceResponseModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyUplinkConnector.Client.Models.DeviceResponseModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "availableFeatures", n => { AvailableFeatures = n.GetObjectValue<global::MyUplinkConnector.Client.Models.AvailableMethods>(global::MyUplinkConnector.Client.Models.AvailableMethods.CreateFromDiscriminatorValue); } },
                { "connectionState", n => { ConnectionState = n.GetEnumValue<global::MyUplinkConnector.Client.Models.DeviceConnectionState>(); } },
                { "firmware", n => { Firmware = n.GetObjectValue<global::MyUplinkConnector.Client.Models.FirmwareResponseModel>(global::MyUplinkConnector.Client.Models.FirmwareResponseModel.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "product", n => { Product = n.GetObjectValue<global::MyUplinkConnector.Client.Models.ProductResponseModel>(global::MyUplinkConnector.Client.Models.ProductResponseModel.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::MyUplinkConnector.Client.Models.AvailableMethods>("availableFeatures", AvailableFeatures);
            writer.WriteEnumValue<global::MyUplinkConnector.Client.Models.DeviceConnectionState>("connectionState", ConnectionState);
            writer.WriteObjectValue<global::MyUplinkConnector.Client.Models.FirmwareResponseModel>("firmware", Firmware);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::MyUplinkConnector.Client.Models.ProductResponseModel>("product", Product);
        }
    }
}
