// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using MyUplinkConnector.Client.Models;
using MyUplinkConnector.Client.V2.Devices.Item.Points.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace MyUplinkConnector.Client.V2.Devices.Item.Points
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\devices\{deviceId}\points
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class PointsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the MyUplinkConnector.Client.v2.devices.item.points.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.V2.Devices.Item.Points.Item.ParameterItemRequestBuilder"/></returns>
        public global::MyUplinkConnector.Client.V2.Devices.Item.Points.Item.ParameterItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("parameter%2Did", position);
                return new global::MyUplinkConnector.Client.V2.Devices.Item.Points.Item.ParameterItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PointsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/devices/{deviceId}/points{?parameters*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PointsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/devices/{deviceId}/points{?parameters*}", rawUrl)
        {
        }
        /// <summary>
        /// Get data points for device.
        /// </summary>
        /// <returns>A List&lt;global::MyUplinkConnector.Client.Models.ParameterData&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::MyUplinkConnector.Client.Models.ParameterData>?> GetAsync(Action<RequestConfiguration<global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder.PointsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::MyUplinkConnector.Client.Models.ParameterData>> GetAsync(Action<RequestConfiguration<global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder.PointsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::MyUplinkConnector.Client.Models.ParameterData>(requestInfo, global::MyUplinkConnector.Client.Models.ParameterData.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Sample request:                PATCH /v2/devices/{deviceId}/points    {      &quot;parameterId&quot; : &quot;parameterValue&quot;    }&lt;br /&gt;Where:* deviceId - id of the specific device;* parameterId - id of the specific device parameter;* parameterValue - a new value for this parameter.
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.Models.CloudToDeviceMethodResult"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::MyUplinkConnector.Client.Models.CloudToDeviceMethodResult?> PatchAsync(global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::MyUplinkConnector.Client.Models.CloudToDeviceMethodResult> PatchAsync(global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::MyUplinkConnector.Client.Models.CloudToDeviceMethodResult>(requestInfo, global::MyUplinkConnector.Client.Models.CloudToDeviceMethodResult.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get data points for device.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder.PointsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder.PointsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "text/plain;q=0.9");
            return requestInfo;
        }
        /// <summary>
        /// Sample request:                PATCH /v2/devices/{deviceId}/points    {      &quot;parameterId&quot; : &quot;parameterValue&quot;    }&lt;br /&gt;Where:* deviceId - id of the specific device;* parameterId - id of the specific device parameter;* parameterValue - a new value for this parameter.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, text/plain;q=0.9");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json-patch+json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get data points for device.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class PointsRequestBuilderGetQueryParameters 
        {
            /// <summary>Parameter ids separated by comma. Optional parameter:If Parameter Ids are not defined, then all device&apos;s parameters will be listed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("parameters")]
            public string? Parameters { get; set; }
#nullable restore
#else
            [QueryParameter("parameters")]
            public string Parameters { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class PointsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::MyUplinkConnector.Client.V2.Devices.Item.Points.PointsRequestBuilder.PointsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class PointsRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
