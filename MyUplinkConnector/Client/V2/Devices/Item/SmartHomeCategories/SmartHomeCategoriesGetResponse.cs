// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyUplinkConnector.Client.V2.Devices.Item.SmartHomeCategories
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class SmartHomeCategoriesGetResponse : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The shElectricalPriceMode property</summary>
        public bool? ShElectricalPriceMode { get; set; }
        /// <summary>The shElectricalPriceModeDuration property</summary>
        public bool? ShElectricalPriceModeDuration { get; set; }
        /// <summary>The shElectricalPriceNextHigh property</summary>
        public bool? ShElectricalPriceNextHigh { get; set; }
        /// <summary>The shElectricalPriceNextLow property</summary>
        public bool? ShElectricalPriceNextLow { get; set; }
        /// <summary>The shElectricPowerUsedCurrently property</summary>
        public bool? ShElectricPowerUsedCurrently { get; set; }
        /// <summary>The shEnergyMetered property</summary>
        public bool? ShEnergyMetered { get; set; }
        /// <summary>The shEnergyMeteredDay property</summary>
        public bool? ShEnergyMeteredDay { get; set; }
        /// <summary>The shEnergyMeteredMonth property</summary>
        public bool? ShEnergyMeteredMonth { get; set; }
        /// <summary>The shEnergyMeteredYear property</summary>
        public bool? ShEnergyMeteredYear { get; set; }
        /// <summary>The shEnergyStateOfCharge property</summary>
        public bool? ShEnergyStateOfCharge { get; set; }
        /// <summary>The shFanMode property</summary>
        public bool? ShFanMode { get; set; }
        /// <summary>The shFanStatus property</summary>
        public bool? ShFanStatus { get; set; }
        /// <summary>The shHeatBoost property</summary>
        public bool? ShHeatBoost { get; set; }
        /// <summary>The shHeatMode property</summary>
        public bool? ShHeatMode { get; set; }
        /// <summary>The shHwBoost property</summary>
        public bool? ShHwBoost { get; set; }
        /// <summary>The shHwMode property</summary>
        public bool? ShHwMode { get; set; }
        /// <summary>The shHwTemp property</summary>
        public bool? ShHwTemp { get; set; }
        /// <summary>The shIndoorCO2 property</summary>
        public bool? ShIndoorCO2 { get; set; }
        /// <summary>The shIndoorCO2Sp property</summary>
        public bool? ShIndoorCO2Sp { get; set; }
        /// <summary>The shIndoorDeHumiditySp property</summary>
        public bool? ShIndoorDeHumiditySp { get; set; }
        /// <summary>The shIndoorHumidity property</summary>
        public bool? ShIndoorHumidity { get; set; }
        /// <summary>The shIndoorHumidityMode property</summary>
        public bool? ShIndoorHumidityMode { get; set; }
        /// <summary>The shIndoorHumiditySp property</summary>
        public bool? ShIndoorHumiditySp { get; set; }
        /// <summary>The shIndoorSpCool property</summary>
        public bool? ShIndoorSpCool { get; set; }
        /// <summary>The shIndoorSpHeat property</summary>
        public bool? ShIndoorSpHeat { get; set; }
        /// <summary>The shIndoorSpOffsCool property</summary>
        public bool? ShIndoorSpOffsCool { get; set; }
        /// <summary>The shIndoorSpOffsHeat property</summary>
        public bool? ShIndoorSpOffsHeat { get; set; }
        /// <summary>The shIndoorTemp property</summary>
        public bool? ShIndoorTemp { get; set; }
        /// <summary>The shOutdoorTemp property</summary>
        public bool? ShOutdoorTemp { get; set; }
        /// <summary>The shPoolSp property</summary>
        public bool? ShPoolSp { get; set; }
        /// <summary>The shPoolTemp property</summary>
        public bool? ShPoolTemp { get; set; }
        /// <summary>The shReturnTemp property</summary>
        public bool? ShReturnTemp { get; set; }
        /// <summary>The shSmartMode property</summary>
        public bool? ShSmartMode { get; set; }
        /// <summary>The shSolarEnergyProducedDay property</summary>
        public bool? ShSolarEnergyProducedDay { get; set; }
        /// <summary>The shSolarEnergyProducedMonth property</summary>
        public bool? ShSolarEnergyProducedMonth { get; set; }
        /// <summary>The shSolarEnergyProducedTotal property</summary>
        public bool? ShSolarEnergyProducedTotal { get; set; }
        /// <summary>The shSolarEnergyProducedWeek property</summary>
        public bool? ShSolarEnergyProducedWeek { get; set; }
        /// <summary>The shSolarEnergyProducedYear property</summary>
        public bool? ShSolarEnergyProducedYear { get; set; }
        /// <summary>The shSolarPowerAvailableCurrently property</summary>
        public bool? ShSolarPowerAvailableCurrently { get; set; }
        /// <summary>The shSupplyTemp property</summary>
        public bool? ShSupplyTemp { get; set; }
        /// <summary>The shVentBoost property</summary>
        public bool? ShVentBoost { get; set; }
        /// <summary>The shVentMode property</summary>
        public bool? ShVentMode { get; set; }
        /// <summary>The shZoneMode property</summary>
        public bool? ShZoneMode { get; set; }
        /// <summary>The shZones property</summary>
        public bool? ShZones { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyUplinkConnector.Client.V2.Devices.Item.SmartHomeCategories.SmartHomeCategoriesGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyUplinkConnector.Client.V2.Devices.Item.SmartHomeCategories.SmartHomeCategoriesGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyUplinkConnector.Client.V2.Devices.Item.SmartHomeCategories.SmartHomeCategoriesGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "sh-electricPowerUsedCurrently", n => { ShElectricPowerUsedCurrently = n.GetBoolValue(); } },
                { "sh-electricalPriceMode", n => { ShElectricalPriceMode = n.GetBoolValue(); } },
                { "sh-electricalPriceModeDuration", n => { ShElectricalPriceModeDuration = n.GetBoolValue(); } },
                { "sh-electricalPriceNextHigh", n => { ShElectricalPriceNextHigh = n.GetBoolValue(); } },
                { "sh-electricalPriceNextLow", n => { ShElectricalPriceNextLow = n.GetBoolValue(); } },
                { "sh-energyMetered", n => { ShEnergyMetered = n.GetBoolValue(); } },
                { "sh-energyMeteredDay", n => { ShEnergyMeteredDay = n.GetBoolValue(); } },
                { "sh-energyMeteredMonth", n => { ShEnergyMeteredMonth = n.GetBoolValue(); } },
                { "sh-energyMeteredYear", n => { ShEnergyMeteredYear = n.GetBoolValue(); } },
                { "sh-energyStateOfCharge", n => { ShEnergyStateOfCharge = n.GetBoolValue(); } },
                { "sh-fanMode", n => { ShFanMode = n.GetBoolValue(); } },
                { "sh-fanStatus", n => { ShFanStatus = n.GetBoolValue(); } },
                { "sh-heatBoost", n => { ShHeatBoost = n.GetBoolValue(); } },
                { "sh-heatMode", n => { ShHeatMode = n.GetBoolValue(); } },
                { "sh-hwBoost", n => { ShHwBoost = n.GetBoolValue(); } },
                { "sh-hwMode", n => { ShHwMode = n.GetBoolValue(); } },
                { "sh-hwTemp", n => { ShHwTemp = n.GetBoolValue(); } },
                { "sh-indoorCO2", n => { ShIndoorCO2 = n.GetBoolValue(); } },
                { "sh-indoorCO2Sp", n => { ShIndoorCO2Sp = n.GetBoolValue(); } },
                { "sh-indoorDeHumiditySp", n => { ShIndoorDeHumiditySp = n.GetBoolValue(); } },
                { "sh-indoorHumidity", n => { ShIndoorHumidity = n.GetBoolValue(); } },
                { "sh-indoorHumidityMode", n => { ShIndoorHumidityMode = n.GetBoolValue(); } },
                { "sh-indoorHumiditySp", n => { ShIndoorHumiditySp = n.GetBoolValue(); } },
                { "sh-indoorSpCool", n => { ShIndoorSpCool = n.GetBoolValue(); } },
                { "sh-indoorSpHeat", n => { ShIndoorSpHeat = n.GetBoolValue(); } },
                { "sh-indoorSpOffsCool", n => { ShIndoorSpOffsCool = n.GetBoolValue(); } },
                { "sh-indoorSpOffsHeat", n => { ShIndoorSpOffsHeat = n.GetBoolValue(); } },
                { "sh-indoorTemp", n => { ShIndoorTemp = n.GetBoolValue(); } },
                { "sh-outdoorTemp", n => { ShOutdoorTemp = n.GetBoolValue(); } },
                { "sh-poolSp", n => { ShPoolSp = n.GetBoolValue(); } },
                { "sh-poolTemp", n => { ShPoolTemp = n.GetBoolValue(); } },
                { "sh-returnTemp", n => { ShReturnTemp = n.GetBoolValue(); } },
                { "sh-smartMode", n => { ShSmartMode = n.GetBoolValue(); } },
                { "sh-solarEnergyProducedDay", n => { ShSolarEnergyProducedDay = n.GetBoolValue(); } },
                { "sh-solarEnergyProducedMonth", n => { ShSolarEnergyProducedMonth = n.GetBoolValue(); } },
                { "sh-solarEnergyProducedTotal", n => { ShSolarEnergyProducedTotal = n.GetBoolValue(); } },
                { "sh-solarEnergyProducedWeek", n => { ShSolarEnergyProducedWeek = n.GetBoolValue(); } },
                { "sh-solarEnergyProducedYear", n => { ShSolarEnergyProducedYear = n.GetBoolValue(); } },
                { "sh-solarPowerAvailableCurrently", n => { ShSolarPowerAvailableCurrently = n.GetBoolValue(); } },
                { "sh-supplyTemp", n => { ShSupplyTemp = n.GetBoolValue(); } },
                { "sh-ventBoost", n => { ShVentBoost = n.GetBoolValue(); } },
                { "sh-ventMode", n => { ShVentMode = n.GetBoolValue(); } },
                { "sh-zoneMode", n => { ShZoneMode = n.GetBoolValue(); } },
                { "sh-zones", n => { ShZones = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("sh-electricalPriceMode", ShElectricalPriceMode);
            writer.WriteBoolValue("sh-electricalPriceModeDuration", ShElectricalPriceModeDuration);
            writer.WriteBoolValue("sh-electricalPriceNextHigh", ShElectricalPriceNextHigh);
            writer.WriteBoolValue("sh-electricalPriceNextLow", ShElectricalPriceNextLow);
            writer.WriteBoolValue("sh-electricPowerUsedCurrently", ShElectricPowerUsedCurrently);
            writer.WriteBoolValue("sh-energyMetered", ShEnergyMetered);
            writer.WriteBoolValue("sh-energyMeteredDay", ShEnergyMeteredDay);
            writer.WriteBoolValue("sh-energyMeteredMonth", ShEnergyMeteredMonth);
            writer.WriteBoolValue("sh-energyMeteredYear", ShEnergyMeteredYear);
            writer.WriteBoolValue("sh-energyStateOfCharge", ShEnergyStateOfCharge);
            writer.WriteBoolValue("sh-fanMode", ShFanMode);
            writer.WriteBoolValue("sh-fanStatus", ShFanStatus);
            writer.WriteBoolValue("sh-heatBoost", ShHeatBoost);
            writer.WriteBoolValue("sh-heatMode", ShHeatMode);
            writer.WriteBoolValue("sh-hwBoost", ShHwBoost);
            writer.WriteBoolValue("sh-hwMode", ShHwMode);
            writer.WriteBoolValue("sh-hwTemp", ShHwTemp);
            writer.WriteBoolValue("sh-indoorCO2", ShIndoorCO2);
            writer.WriteBoolValue("sh-indoorCO2Sp", ShIndoorCO2Sp);
            writer.WriteBoolValue("sh-indoorDeHumiditySp", ShIndoorDeHumiditySp);
            writer.WriteBoolValue("sh-indoorHumidity", ShIndoorHumidity);
            writer.WriteBoolValue("sh-indoorHumidityMode", ShIndoorHumidityMode);
            writer.WriteBoolValue("sh-indoorHumiditySp", ShIndoorHumiditySp);
            writer.WriteBoolValue("sh-indoorSpCool", ShIndoorSpCool);
            writer.WriteBoolValue("sh-indoorSpHeat", ShIndoorSpHeat);
            writer.WriteBoolValue("sh-indoorSpOffsCool", ShIndoorSpOffsCool);
            writer.WriteBoolValue("sh-indoorSpOffsHeat", ShIndoorSpOffsHeat);
            writer.WriteBoolValue("sh-indoorTemp", ShIndoorTemp);
            writer.WriteBoolValue("sh-outdoorTemp", ShOutdoorTemp);
            writer.WriteBoolValue("sh-poolSp", ShPoolSp);
            writer.WriteBoolValue("sh-poolTemp", ShPoolTemp);
            writer.WriteBoolValue("sh-returnTemp", ShReturnTemp);
            writer.WriteBoolValue("sh-smartMode", ShSmartMode);
            writer.WriteBoolValue("sh-solarEnergyProducedDay", ShSolarEnergyProducedDay);
            writer.WriteBoolValue("sh-solarEnergyProducedMonth", ShSolarEnergyProducedMonth);
            writer.WriteBoolValue("sh-solarEnergyProducedTotal", ShSolarEnergyProducedTotal);
            writer.WriteBoolValue("sh-solarEnergyProducedWeek", ShSolarEnergyProducedWeek);
            writer.WriteBoolValue("sh-solarEnergyProducedYear", ShSolarEnergyProducedYear);
            writer.WriteBoolValue("sh-solarPowerAvailableCurrently", ShSolarPowerAvailableCurrently);
            writer.WriteBoolValue("sh-supplyTemp", ShSupplyTemp);
            writer.WriteBoolValue("sh-ventBoost", ShVentBoost);
            writer.WriteBoolValue("sh-ventMode", ShVentMode);
            writer.WriteBoolValue("sh-zoneMode", ShZoneMode);
            writer.WriteBoolValue("sh-zones", ShZones);
        }
    }
}
