@page "/heat-pump-schedule-manager"
@using System.Diagnostics.CodeAnalysis
@using BlazorBootstrap
@using System.Globalization
@using Web.Client.DTOs
@inject HttpClient http
@inject ToastService ToastService
@inject NavigationManager navManager


<PageTitle>Heat pump schedule</PageTitle>

<div class="container-md">
    <div class="row justify-content-center">
        <div class="col col-md-6">
            <div class="row justify-content-center">
                <dic class="col d-flex justify-content-between">
                    <h3>Heat pump schedule</h3>
                    <NavLink href="@GetInverterScheduleUrl()" class="mt-1">
                        <span>Inverter schedule</span>
                    </NavLink>
                </dic>
            </div>

            <form @onsubmit="OnSaveClick">
                <div class="row justify-content-center">
                    <dic class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text">Date</span>
                            <InputDate TValue="DateTime" @bind-Value=SelectedDate @bind-Value:after="DateFromUpdated" class="form-control" />
                        </div>
                    </dic>
                </div>

                <div class="row mb-1 hoverable align-items-center justify-content-center">
                    <div class="col-4">
                        <span>Hour</span>
                    </div>
                    <div class="col-4">
                        <span>Heating offset</span>
                    </div>
                    <div class="col-4">
                        <span>Hot water mode</span>
                    </div>
                </div>

                @foreach (var hour in Hours)
                {
                    <div class="row mb-1 hoverable align-items-center justify-content-center">
                        <div class="col-4">
                            <span>@($"{hour.Hour.ToString().PadLeft(2, '0')}:00")</span>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value=hour.HeatingOffset class="form-control" />
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value=hour.HotWaterMode class="form-control" />
                        </div>
                    </div>
                }

                <div class="row justify-content-center">
                    <dic class="col d-flex justify-content-end mt-4">
                        <button type="submit" class="btn chart-button-wide btn-primary">Save</button>
                    </dic>
                </div>
            </form>

        </div>
    </div>
</div>

@code {

    [SupplyParameterFromQuery(Name = "d")]
    public string? SelectedDateQ { get; set; }

    public DateTime SelectedDate { get; set; } = DateTime.Today;

    private HourModel[] Hours { get; set; } = [];


    private async Task DateFromUpdated()
    {
        navManager.NavigateTo(navManager.GetUriWithQueryParameters(new Dictionary<string, object?> {
            { "d", SelectedDate.ToString("yyyy-MM-dd") },
        }));
        await LoadSchedule();
    }

    private async Task LoadSchedule()
    {
        var schedule = await http.GetFromJsonAsync<HeatPumpDayScheduleDto>($"api/heatPumpSchedule/{SelectedDate:yyyy-MM-dd}");
        if (schedule != null && schedule.Hours != null && schedule.Hours.Length == 24)
        {
            var hours = new HourModel[24];
            for (int i = 0; i < 24; i++)
            {
                var hourDto = schedule.Hours[i];
                hours[i] = new HourModel
                {
                    Hour = i,
                    HeatingOffset = hourDto.HeatingOffset,
                    HotWaterMode = hourDto.HotWaterMode,
                };
            }

            Hours = hours;
        }
    }

    private async Task OnSaveClick()
    {
        var scheduleDto = new HeatPumpDayScheduleDto { Hours = new HeatPumpHourlyScheduleDto[24] };
        for (int i = 0; i < 24; i++)
        {
            var hour = Hours[i];
            scheduleDto.Hours[i] = new HeatPumpHourlyScheduleDto
            {
                Hour = i,
                HeatingOffset = hour.HeatingOffset,
                HotWaterMode = hour.HotWaterMode,
            };
        }

        var result = await http.PutAsJsonAsync($"api/heatPumpSchedule/{SelectedDate:yyyy-MM-dd}", scheduleDto);
        if (result.IsSuccessStatusCode)
        {
            ToastService.Notify(new(ToastType.Success, "Saved"));
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, "Save failed"));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (SelectedDateQ != null && TryParseDate(SelectedDateQ, out var d))
            SelectedDate = d;

        var hours = new HourModel[24];
        for (int i = 0; i < 24; i++)
        {
            hours[i] = new HourModel
            {
                Hour = i,
            };
        }
        Hours = hours;

        await LoadSchedule();

        bool TryParseDate(string? s, out DateTime d)
            => DateTime.TryParseExact(s, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out d);
    }

    private string GetInverterScheduleUrl()
    {
        var url = "inverter-schedule-manager";
        if (SelectedDateQ != null)
            url += $"?d={SelectedDate:yyyy-MM-dd}";
        return url;
    }

    private class HourModel
    {
        public int? HeatingOffset { get; set; }
        public int? HotWaterMode { get; set; }
        public int Hour { get; set; }
    }
}