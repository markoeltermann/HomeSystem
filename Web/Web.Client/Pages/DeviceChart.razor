@using System.Globalization
@using Web.Client.DTOs
@inject NavigationManager navManager
@inject HttpClient http

<div class="row mb-2">
    <div class="col-6 col-xl-3">
        <div class="input-group mb-3">
            <span class="input-group-text">From</span>
            <InputDate TValue="DateTime" @bind-Value=DateFrom @bind-Value:after="SelectedValuesUpdated" class="form-control" />
        </div>
    </div>
    <div class="col-xl-6 col-lg-12 order-5 order-xl-2 d-flex justify-content-between align-items-start">
        <div></div>
        <div class="d-flex flex-column">
            <div>
                <div class="btn-group me-2 chart-button-wide" role="group">
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnPreviousMonthClick">◁</button>
                    <button type="button" class="btn btn-primary" @onclick="OnMonthClick">Month</button>
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnNextMonthClick">▷</button>
                </div>
                <div class="btn-group me-2 chart-button-wide" role="group">
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnPreviousWeekClick">◁</button>
                    <button type="button" class="btn btn-primary" @onclick="OnWeekClick">Week</button>
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnNextWeekClick">▷</button>
                </div>
                <div class="btn-group chart-button-wide" role="group">
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnPreviousDayClick">◁</button>
                    <button type="button" class="btn btn-primary" @onclick="OnDayClick">Day</button>
                    <button type="button" class="btn btn-primary chart-button-narrow" @onclick="OnNextDayClick">▷</button>
                </div>
            </div>
            @if (IsLoading && !IsSmall)
            {
                <div class="progress mt-2 loading-bar" role="progressbar">
                    <div class="progress-bar progress-bar-striped progress-bar-animated w-100"></div>
                </div>
            }
        </div>
        <button type="button" class="btn chart-button-narrow btn-primary me-2" @onclick="SelectedValuesUpdated">↺</button>
    </div>
    <div class="col-6 col-xl-3 order-2 order-xl-3">
        <div class="input-group mb-3 pe-1">
            <span class="input-group-text">Up&nbsp;to</span>
            <InputDate TValue="DateTime" @bind-Value=DateUpTo @bind-Value:after="SelectedValuesUpdated" class="form-control" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        @if (IsSmall)
        {
            <div class="progress mt-2 loading-bar @(IsLoading ? "" : "invisible")" role="progressbar">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-100"></div>
            </div>
        }
    </div>
</div>
<div class="row flex-grow-1">
    <div class="col pb-2 @(IsSmall ? "" : "ps-4 pe-4")">
        <div class="@(IsSmall ? "small-chart" : "h-100")">
            <ApexChart TItem="NumericValueDto" Options="Options" @ref="apexChart" XAxisType="XAxisType.Datetime">
                @foreach (var series in Values)
                {
                    <ApexPointSeries TItem="NumericValueDto"
                                     Items="series.Item2"
                                     Name="@series.Item1"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.Timestamp)"
                                     YValue="@(e => (decimal?)e.Value)" />
                }

            </ApexChart>
        </div>
    </div>
</div>

@code {
    ApexChart<NumericValueDto> apexChart = null!;

    [SupplyParameterFromQuery(Name = "df")]
    public string? DateFromQ { get; set; }

    [SupplyParameterFromQuery(Name = "du")]
    public string? DateUpToQ { get; set; }

    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public int WindowWidth { get; set; }

    public DateTime DateFrom { get; set; }

    public DateTime DateUpTo { get; set; }

    bool IsLoading { get; set; }

    int generation;

    private async Task OnPreviousDayClick()
    {
        DateFrom = DateFrom.AddDays(-1);
        DateUpTo = DateUpTo.AddDays(-1);

        await SelectedValuesUpdated();
    }

    private async Task OnNextDayClick()
    {
        DateFrom = DateFrom.AddDays(1);
        DateUpTo = DateUpTo.AddDays(1);

        await SelectedValuesUpdated();
    }

    private async Task OnPreviousWeekClick()
    {
        DateFrom = DateFrom.AddDays(-7);
        DateUpTo = DateUpTo.AddDays(-7);

        await SelectedValuesUpdated();
    }

    private async Task OnNextWeekClick()
    {
        DateFrom = DateFrom.AddDays(7);
        DateUpTo = DateUpTo.AddDays(7);

        await SelectedValuesUpdated();
    }

    private async Task OnPreviousMonthClick()
    {
        DateFrom = DateFrom.AddMonths(-1);
        DateUpTo = DateUpTo.AddMonths(-1);

        await SelectedValuesUpdated();
    }

    private async Task OnNextMonthClick()
    {
        DateFrom = DateFrom.AddMonths(1);
        DateUpTo = DateUpTo.AddMonths(1);

        await SelectedValuesUpdated();
    }

    private async Task OnDayClick()
    {
        DateFrom = DateUpTo = DateTime.Today;
        await SelectedValuesUpdated();
    }

    private async Task OnMonthClick()
    {
        var today = DateTime.Today;
        DateFrom = new DateTime(today.Year, today.Month, 1);
        DateUpTo = DateFrom.AddMonths(1).AddDays(-1);
        await SelectedValuesUpdated();
    }

    private async Task OnWeekClick()
    {
        var today = DateTime.Today;
        DateFrom = today.AddDays(today.DayOfWeek == DayOfWeek.Sunday ? -6 : -((int)today.DayOfWeek - 1));
        DateUpTo = DateFrom.AddDays(6);
        await SelectedValuesUpdated();
    }

    public async Task SelectedValuesUpdated()
    {
        if (Devices.Length == 0)
            return;

        var selectedDevicePointIds = Devices.SelectMany(d => d.Points!.Where(p => p.IsSelected)).Select(d => d.Id).ToArray();
        navManager.NavigateTo(navManager.GetUriWithQueryParameters(new Dictionary<string, object?> {
            { "df", DateFrom.ToString("yyyy-MM-dd") },
            { "du", DateUpTo.ToString("yyyy-MM-dd") },
            { "dpid", selectedDevicePointIds }
        }));
        generation++;

        var currentGeneration = generation;

        var newValues = new List<(string name, ValueContainerDto values)>();

        IsLoading = true;
        StateHasChanged();
        // await Task.Delay(1000);

        foreach (var device in Devices)
        {
            if (device?.Points != null)
            {
                foreach (var point in device.Points.Where(x => x.IsSelected))
                {
                    var id = point.Id;
                    var values = await http.GetFromJsonAsync<ValueContainerDto>($"api/devicePoints/{id}/values?from={DateFrom:yyyy-MM-dd}&upTo={DateUpTo:yyyy-MM-dd}");
                    newValues.Add((device.Name + ": " + point.Name, values!));

                    if (currentGeneration != generation)
                        return;
                }
            }
        }

        if (newValues.Any())
        {
            var values = new List<(string, NumericValueDto[])>();
            var yAxes = new List<YAxis>();
            var byUnit = newValues.GroupBy(x => x.values.Unit).ToList();
            var isFirstUnit = true;
            foreach (var unitValues in byUnit)
            {
                var isFirstInGroup = true;
                string? firstSeriesName = null;

                foreach (var (name, valueCollection) in unitValues)
                {
                    if (isFirstInGroup)
                        firstSeriesName = name;
                    values.Add((name, valueCollection.Values));

                    var yAxis = new YAxis
                    {
                        SeriesName = firstSeriesName,
                        Show = isFirstInGroup,
                        Opposite = !isFirstUnit
                    };
                    if (unitValues.Key == "%")
                    {
                        yAxis.Min = 0.0;
                        yAxis.Max = 100.0;
                    }
                    var fractionDigits = unitValues.Key == "EUR/kWh" ? 4 : 1;
                    yAxis.Labels = new YAxisLabels
                    {
                        Formatter = $"function (value) {{" +
                            $"return value?.toLocaleString(undefined, {{ minimumFractionDigits: {fractionDigits}, maximumFractionDigits: {fractionDigits}, useGrouping: false }}); }}",
                        Show = unitValues.Key != "bool",
                        Style = new AxisLabelStyle
                        {
                            FontSize = "1em",
                            FontFamily = "inherit",
                        },
                    };
                    yAxes.Add(yAxis);
                    isFirstInGroup = false;
                }

                isFirstUnit = false;
            }

            Values = values;

            var height = "100%";
            if (IsSmall)
            {
                height = $"{(WindowWidth * 0.7 + selectedDevicePointIds.Length * 10):0}px";
            }

            Options = CreateChartOptions(yAxes, height);
        }
        else
        {
            Values = new List<(string, NumericValueDto[])>();
            Options = CreateChartOptions();
        }
        IsLoading = false;
        await apexChart.UpdateSeriesAsync(false);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && apexChart != null)
            await apexChart.RenderAsync();
    }

    List<(string, NumericValueDto[])> Values { get; set; } = new();

    ApexChartOptions<NumericValueDto> Options = CreateChartOptions();

    private static ApexChartOptions<NumericValueDto> CreateChartOptions(List<YAxis>? yAxes = null, string? height = "100%")
    {
        var options = new ApexChartOptions<NumericValueDto>
        {
            Colors = ["#1f77b4", "#aec7e8", "#ff7f0e", "#ffbb78",
                            "#2ca02c", "#98df8a", "#d62728", "#ff9896",
                            "#9467bd", "#c5b0d5", "#8c564b", "#c49c94",
                            "#e377c2", "#f7b6d2", "#7f7f7f", "#c7c7c7",
                            "#bcbd22", "#dbdb8d", "#17becf", "#9edae5"],
            Legend = new Legend
            {
                Show = true,
                FontSize = "inherit",
                FontFamily = "inherit",
            },
            Chart = new Chart
            {
                Animations = new Animations
                {
                    Enabled = false
                },
                Height = height,
            },
            Stroke = new Stroke
            {
                Width = 1.9
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    DatetimeUTC = false,
                    Style = new AxisLabelStyle
                    {
                        FontSize = "inherit",
                        FontFamily = "inherit",
                    },
                },
            },
            Grid = new Grid
            {
                Xaxis = new GridXAxis
                {
                    Lines = new Lines
                    {
                        Show = true
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Shared = true,
                X = new TooltipX
                {
                    Format = "MM-dd HH:mm"
                },
                FollowCursor = true
            }
        };
        if (yAxes != null)
            options.Yaxis = yAxes;
        return options;
    }

    [Parameter]
    public DeviceDto[] Devices { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (DateFromQ != null && DateUpToQ != null && TryParseDate(DateFromQ, out var dateFrom) && TryParseDate(DateUpToQ, out var dateUpTo))
        {
            DateFrom = dateFrom;
            DateUpTo = dateUpTo;
        }
        else
        {
            DateFrom = DateUpTo = DateTime.Today;
        }

        await SelectedValuesUpdated();

        bool TryParseDate(string? s, out DateTime d)
            => DateTime.TryParseExact(s, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out d);
    }
}