@page "/chartView"
@page "/"
@using System.Globalization
@using Web.Client.DTOs
@using Web.Client.Models
@using Web.Client.Services
@inject HttpClient http
@inject WindowSizeService windowSizeService
@implements IDisposable

<PageTitle>Point viewer</PageTitle>

@if (_windowSize.IsExtraSmall)
{
    <div class="d-flex flex-column">
        @if (Devices.Length > 0)
        {
            @* <div class="ratio ratio-4x3"> *@
                <DeviceChart Devices="@Devices" @ref=deviceChart IsSmall="@_windowSize.IsExtraSmall" WindowWidth="@_windowSize.Width" />
            @* </div> *@
        }
        <DeviceList Devices="@Devices" SelectedValuesUpdated="@OnSelectedValuesUpdated" />
    </div>
}
else
{
    <div class="d-flex flex-row h-100">
        <DeviceList Devices="@Devices" SelectedValuesUpdated="@OnSelectedValuesUpdated" />
        <div class="flex-grow-1 d-flex flex-column overflow-hidden pt-1 ms-3">
            @if (Devices.Length > 0)
            {
                <DeviceChart Devices="@Devices" @ref=deviceChart />
            }
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "dpid")]
    public int[]? SelectedDevicePointIds { get; set; }

    DeviceDto[] Devices { get; set; } = [];

    DeviceChart deviceChart = null!;

    private WindowSize _windowSize = new WindowSize();

    protected override async Task OnInitializedAsync()
    {
        await windowSizeService.InitializeAsync();
        _windowSize = windowSizeService.CurrentSize;
        windowSizeService.OnResize += HandleWindowResize;

        Devices = await http.GetFromJsonAsync<DeviceDto[]>("api/devices") ?? Array.Empty<DeviceDto>();
        if (SelectedDevicePointIds != null && SelectedDevicePointIds.Any())
        {
            foreach (var device in Devices)
            {
                foreach (var point in device.Points!)
                {
                    if (SelectedDevicePointIds.Contains(point.Id))
                        point.IsSelected = true;
                }
            }
        }

        await OnSelectedValuesUpdated();
    }

    private void HandleWindowResize(WindowSize windowSize)
    {
        _windowSize = windowSize;
        // UpdateLayoutBasedOnWindowSize(windowSize);
        StateHasChanged();
    }

    // private void UpdateLayoutBasedOnWindowSize(WindowSize windowSize)
    // {
    //     // Update flags and classes based on window size
    //     _isSmallScreen = windowSize.IsExtraSmall || windowSize.IsSmall;

    //     // When screen is extra small, we change the layout to be more mobile friendly
    //     if (windowSize.IsExtraSmall)
    //     {
    //         _viewClassName = "d-flex flex-column h-100";
    //     }
    //     // Small to medium screens use row layout but might need spacing adjustments
    //     else if (windowSize.IsSmall || windowSize.IsMedium)
    //     {
    //         _viewClassName = "d-flex flex-row h-100";
    //     }
    //     // Larger screens use the default layout
    //     else
    //     {
    //         _viewClassName = "d-flex flex-row h-100";
    //     }
    // }

    private async Task OnSelectedValuesUpdated()
    {
        if (deviceChart != null)
            await deviceChart.SelectedValuesUpdated();
    }

    public void Dispose()
    {
        // Unsubscribe from resize events
        windowSizeService.OnResize -= HandleWindowResize;
    }
}
