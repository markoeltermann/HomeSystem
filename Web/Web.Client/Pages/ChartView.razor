@page "/chartView"
@page "/"
@using System.Globalization
@using Web.Client.DTOs
@using Web.Client.Models
@using Web.Client.Services
@inject HttpClient http
@inject WindowSizeService windowSizeService
@implements IDisposable

<PageTitle>Point viewer</PageTitle>

@if (_windowSize.IsExtraSmall)
{
    <div class="d-flex flex-column">
        @if (Devices.Length > 0)
        {
            <DeviceChart Devices="@Devices" @ref=deviceChart IsSmall="@_windowSize.IsExtraSmall" WindowWidth="@_windowSize.Width" Updated="OnChartUpdated" />
        }
        <DeviceList Devices="@Devices" SelectedValuesUpdated="@OnSelectedValuesUpdated" @ref="deviceList" SelectedTimestamp="@deviceChart?.SelectedTimestamp" />
    </div>
}
else
{
    <div class="d-flex flex-row h-100">
        <DeviceList Devices="@Devices" SelectedValuesUpdated="@OnSelectedValuesUpdated" @ref="deviceList" SelectedTimestamp="@deviceChart?.SelectedTimestamp" />
        <div class="flex-grow-1 d-flex flex-column overflow-hidden pt-1 ms-3">
            @if (Devices.Length > 0)
            {
                <DeviceChart Devices="@Devices" @ref=deviceChart Updated="OnChartUpdated" />
            }
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "dpid")]
    public int[]? SelectedDevicePointIds { get; set; }

    DeviceDto[] Devices { get; set; } = [];

    DeviceChart deviceChart = null!;
    DeviceList deviceList = null!;

    private WindowSize _windowSize = new WindowSize();

    protected override async Task OnInitializedAsync()
    {
        await windowSizeService.InitializeAsync();
        _windowSize = windowSizeService.CurrentSize;
        windowSizeService.OnResize += HandleWindowResize;

        Devices = await http.GetFromJsonAsync<DeviceDto[]>("api/devices") ?? Array.Empty<DeviceDto>();
        if (SelectedDevicePointIds != null && SelectedDevicePointIds.Any())
        {
            foreach (var device in Devices)
            {
                foreach (var point in device.Points!)
                {
                    if (SelectedDevicePointIds.Contains(point.Id))
                        point.IsSelected = true;
                }
            }
        }

        await OnSelectedValuesUpdated();
    }

    private void HandleWindowResize(WindowSize windowSize)
    {
        _windowSize = windowSize;
        StateHasChanged();
    }

    private async Task OnSelectedValuesUpdated()
    {
        if (deviceChart != null)
            await deviceChart.SelectedValuesUpdated();
    }

    public void Dispose()
    {
        // Unsubscribe from resize events
        windowSizeService.OnResize -= HandleWindowResize;
    }

    private void OnChartUpdated()
    {
        if (deviceList != null)
        {
            deviceList.Render();
        }
    }
}
