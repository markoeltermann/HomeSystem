@page "/chartView"
@page "/"
@using System.Globalization
@using Web.Client.DTOs
@inject HttpClient http
@inject NavigationManager navManager

<PageTitle>Point viewer</PageTitle>

<div class="d-flex flex-row h-100">
    <div class="overflow-y-auto me-3">
        @if (Devices != null)
        {
            foreach (var item in Devices)
            {
                if (item.Points != null)
                {
                                <span>@item.Name</span>
                    @foreach (var point in item.Points)
                    {
                                        <div class="form-check ms-3">
                                            <InputCheckbox class="form-check-input" id="@("point" + point.Id)" @bind-Value=point.IsSelected @bind-Value:after="SelectedValuesUpdated" />
                                            <label class="form-check-label" for="@("point" + point.Id)">
                                @(point.DataTypeName![0..1] + " " + point.Name + (point.Unit != null ? $" ({point.Unit})" : null))
                                            </label>
                                        </div>
                    }
                }
            }
        }
    </div>
    <div class="flex-grow-1 d-flex flex-column overflow-hidden pt-1">
        <div class="row mb-2">
            <div class="col-6 col-xl-3">
                <div class="input-group mb-3">
                    <span class="input-group-text">From</span>
                    <InputDate TValue="DateTime" @bind-Value=DateFrom @bind-Value:after="SelectedValuesUpdated" class="form-control" />
                </div>
            </div>
            <div class="col-xl-6 col-lg-12 order-5 order-xl-2 d-flex justify-content-between align-items-start">
                <div></div>
                <div class="d-flex flex-column">
                    <div>
                        <button type="button" class="btn chart-button-narrow btn-primary me-2" @onclick="OnPreviousClick">◁</button>
                        <button type="button" class="btn chart-button-wide btn-primary me-2" @onclick="OnMonthClick">Month</button>
                        <button type="button" class="btn chart-button-wide btn-primary me-2" @onclick="OnWeekClick">Week</button>
                        <button type="button" class="btn chart-button-wide btn-primary me-2" @onclick="OnDayClick">Day</button>
                        <button type="button" class="btn chart-button-narrow btn-primary" @onclick="OnNextClick">▷</button>
                    </div>
                    @if (IsLoading)
                    {
                            <div class="progress mt-2 loading-bar" role="progressbar">
                                <div class="progress-bar progress-bar-striped progress-bar-animated w-100"></div>
                            </div>
                    }
                </div>
                <button type="button" class="btn chart-button-narrow btn-primary me-2" @onclick="SelectedValuesUpdated">↺</button>
            </div>
            <div class="col-6 col-xl-3 order-2 order-xl-3">
                <div class="input-group mb-3 pe-1">
                    <span class="input-group-text">Up&nbsp;to</span>
                    <InputDate TValue="DateTime" @bind-Value=DateUpTo @bind-Value:after="SelectedValuesUpdated" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row flex-grow-1">
            <div class="col pb-2 ps-4 pe-4">
                <ApexChart TItem="NumericValueDto" Options="Options" @ref="apexChart" XAxisType="XAxisType.Datetime">
                    @foreach (var series in Values)
                    {
                            <ApexPointSeries TItem="NumericValueDto"
                                             Items="series.Item2"
                                             Name="@series.Item1"
                                             SeriesType="SeriesType.Line"
                                             XValue="@(e => e.Timestamp)"
                                             YValue="@(e => (decimal?)e.Value)" />
                    }

                </ApexChart>
            </div>
        </div>
    </div>
</div>

@code {
    bool isInitializing = true;

    ApexChart<NumericValueDto> apexChart = null!;

    [SupplyParameterFromQuery(Name = "df")]
    public string? DateFromQ { get; set; }

    [SupplyParameterFromQuery(Name = "du")]
    public string? DateUpToQ { get; set; }

    public DateTime DateFrom { get; set; }

    public DateTime DateUpTo { get; set; }

    [SupplyParameterFromQuery(Name = "dpid")]
    public int[]? SelectedDevicePointIds { get; set; }

    bool IsLoading { get; set; }

    int generation;

    private async Task OnPreviousClick()
    {
        if (IsMonthSelected())
        {
            DateFrom = DateFrom.AddMonths(-1);
            DateUpTo = DateFrom.AddMonths(1).AddDays(-1);
        }
        else
        {
            var range = DateUpTo.AddDays(1) - DateFrom;
            DateFrom -= range;
            DateUpTo -= range;
        }
        await SelectedValuesUpdated();
    }

    private async Task OnNextClick()
    {
        if (IsMonthSelected())
        {
            DateFrom = DateFrom.AddMonths(1);
            DateUpTo = DateFrom.AddMonths(1).AddDays(-1);
        }
        else
        {
            var range = DateUpTo.AddDays(1) - DateFrom;
            DateFrom += range;
            DateUpTo += range;
        }
        await SelectedValuesUpdated();
    }

    private bool IsMonthSelected()
    {
        return DateFrom.Day == 1 && DateUpTo == DateFrom.AddMonths(1).AddDays(-1);
    }

    private async Task OnDayClick()
    {
        DateFrom = DateUpTo = DateTime.Today;
        await SelectedValuesUpdated();
    }

    private async Task OnMonthClick()
    {
        var today = DateTime.Today;
        DateFrom = new DateTime(today.Year, today.Month, 1);
        DateUpTo = DateFrom.AddMonths(1).AddDays(-1);
        await SelectedValuesUpdated();
    }

    private async Task OnWeekClick()
    {
        var today = DateTime.Today;
        DateFrom = today.AddDays(today.DayOfWeek == DayOfWeek.Sunday ? -6 : -((int)today.DayOfWeek - 1));
        DateUpTo = DateFrom.AddDays(6);
        await SelectedValuesUpdated();
    }

    private async Task SelectedValuesUpdated()
    {
        var selectedDevicePointIds = Devices.SelectMany(d => d.Points!.Where(p => p.IsSelected)).Select(d => d.Id).ToArray();
        navManager.NavigateTo(navManager.GetUriWithQueryParameters(new Dictionary<string, object?> {
            { "df", DateFrom.ToString("yyyy-MM-dd") },
            { "du", DateUpTo.ToString("yyyy-MM-dd") },
            { "dpid", selectedDevicePointIds }
        }));
        generation++;

        var currentGeneration = generation;

        var newValues = new List<(string name, ValueContainerDto values)>();

        IsLoading = true;
        StateHasChanged();
        // await Task.Delay(1000);

        foreach (var device in Devices)
        {
            if (device?.Points != null)
            {
                foreach (var point in device.Points.Where(x => x.IsSelected))
                {
                    var id = point.Id;
                    var values = await http.GetFromJsonAsync<ValueContainerDto>($"api/devicePoints/{id}/values?from={DateFrom:yyyy-MM-dd}&upTo={DateUpTo:yyyy-MM-dd}");
                    newValues.Add((device.Name + ": " + point.Name, values!));

                    if (currentGeneration != generation)
                        return;
                }
            }
        }

        if (newValues.Any())
        {
            var values = new List<(string, NumericValueDto[])>();
            var yAxes = new List<YAxis>();
            var byUnit = newValues.GroupBy(x => x.values.Unit).ToList();
            var isFirstUnit = true;
            foreach (var unitValues in byUnit)
            {
                var isFirstInGroup = true;
                string? firstSeriesName = null;

                foreach (var (name, valueCollection) in unitValues)
                {
                    if (isFirstInGroup)
                        firstSeriesName = name;
                    values.Add((name, valueCollection.Values));

                    var yAxis = new YAxis
                        {
                            SeriesName = firstSeriesName,
                            Show = isFirstInGroup,
                            Opposite = !isFirstUnit
                        };
                    if (unitValues.Key == "%")
                    {
                        yAxis.Min = 0.0;
                        yAxis.Max = 100.0;
                    }
                    var fractionDigits = unitValues.Key == "EUR/kWh" ? 4 : 1;
                    yAxis.Labels = new YAxisLabels
                        {
                            Formatter = $"function (value) {{" +
                                        $"return value?.toLocaleString(undefined, {{ minimumFractionDigits: {fractionDigits}, maximumFractionDigits: {fractionDigits}, useGrouping: false }}); }}",
                            Show = unitValues.Key != "bool",
                        };
                    yAxes.Add(yAxis);
                    isFirstInGroup = false;
                }

                isFirstUnit = false;
            }

            Values = values;
            Options = CreateChartOptions(yAxes);
        }
        else
        {
            Values = new List<(string, NumericValueDto[])>();
            Options = CreateChartOptions();
        }
        IsLoading = false;
        await apexChart.UpdateSeriesAsync(false);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            await apexChart.RenderAsync();
    }

    List<(string, NumericValueDto[])> Values { get; set; } = new();

    ApexChartOptions<NumericValueDto> Options = CreateChartOptions();

    private static ApexChartOptions<NumericValueDto> CreateChartOptions(List<YAxis>? yAxes = null)
    {
        var options = new ApexChartOptions<NumericValueDto>
            {
                Colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"],
                Legend = new Legend { Show = true },
                Chart = new Chart
                {
                    Animations = new Animations
                    {
                        Enabled = false
                    },
                    Height = "100%"
                },
                Stroke = new Stroke
                {
                    Width = 2.2
                },
                Xaxis = new XAxis
                {
                    Labels = new XAxisLabels
                    {
                        DatetimeUTC = false
                    }
                },
                Grid = new Grid
                {
                    Xaxis = new GridXAxis
                    {
                        Lines = new Lines
                        {
                            Show = true
                        }
                    }
                },
                Tooltip = new Tooltip
                {
                    Shared = true,
                    X = new TooltipX
                    {
                        Format = "MM-dd HH:mm"
                    },
                    FollowCursor = true
                }
            };
        if (yAxes != null)
            options.Yaxis = yAxes;
        return options;
    }

    DeviceDto[] Devices { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        isInitializing = false;

        if (DateFromQ != null && DateUpToQ != null && TryParseDate(DateFromQ, out var dateFrom) && TryParseDate(DateUpToQ, out var dateUpTo))
        {
            DateFrom = dateFrom;
            DateUpTo = dateUpTo;
        }
        else
        {
            DateFrom = DateUpTo = DateTime.Today;
        }
        // DateFrom = DateTime.Today.AddDays(-7);
        // DateUpTo = DateTime.Today.AddDays(-6);
        Devices = await http.GetFromJsonAsync<DeviceDto[]>("api/devices") ?? Array.Empty<DeviceDto>();
        if (SelectedDevicePointIds != null && SelectedDevicePointIds.Any())
        {
            foreach (var device in Devices)
            {
                foreach (var point in device.Points!)
                {
                    if (SelectedDevicePointIds.Contains(point.Id))
                        point.IsSelected = true;
                }
            }

            await SelectedValuesUpdated();
        }

        bool TryParseDate(string? s, out DateTime d)
            => DateTime.TryParseExact(s, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out d);
    }
}
